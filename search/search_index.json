{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Credit: Randall Munroe (xkcd.com/2054) Welcome to Environmental Incentives' Metrics Service Line site! This site is intended for all EI staff to better understand the services of the Metrics service line and for Metrics service line experts as an important standard reference. Don't build a giant house of cards! We can help you develop solutions that last. All EI Staff If you're here to better understand how the Metrics service line can support your project or internal initiative, you might want to check out our portfolio of projects(), better understand our process for delivering metrics products(), or review one of these helpful introductions to technologies and services available to you: Data Analysis(?) Tool Development(i.e., deployment) Databases() Visualization(?) Mapping and Spatial Analysis(?) Metrics Service Line Experts Metrics service line experts will want to familiarize themselves with all of the content here. This site provides helpful training resources, captures best practices for developing metrics products, and describes our standard consulting process for internal and external clients. If you will be contributing to the development of this site, please reference this guidance. NOTE: In How We Work, reference concepts in OneNote Notebook Internal>Business Intel Product) EI Development Guidance This was produced with mkdocs. For full documentation visit mkdocs.org . Contents Home Portfolio How We Work (Metrics Consulting Process) Conservation Design Project Planning Git Development Deployment (non-tech: how do we deliver products?) Data Management (non-tech: database overview) Data Science (non-tech: types of data analysis) Spatial Analysis (non-tech: types of spatial data analysis) Visualization (non-tech: visualization options) Packages News/Blog How to Maintain this Site Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#all-ei-staff","text":"If you're here to better understand how the Metrics service line can support your project or internal initiative, you might want to check out our portfolio of projects(), better understand our process for delivering metrics products(), or review one of these helpful introductions to technologies and services available to you: Data Analysis(?) Tool Development(i.e., deployment) Databases() Visualization(?) Mapping and Spatial Analysis(?)","title":"All EI Staff"},{"location":"#metrics-service-line-experts","text":"Metrics service line experts will want to familiarize themselves with all of the content here. This site provides helpful training resources, captures best practices for developing metrics products, and describes our standard consulting process for internal and external clients. If you will be contributing to the development of this site, please reference this guidance. NOTE: In How We Work, reference concepts in OneNote Notebook Internal>Business Intel Product)","title":"Metrics Service Line Experts"},{"location":"#ei-development-guidance","text":"This was produced with mkdocs. For full documentation visit mkdocs.org .","title":"EI Development Guidance"},{"location":"#contents","text":"Home Portfolio How We Work (Metrics Consulting Process) Conservation Design Project Planning Git Development Deployment (non-tech: how do we deliver products?) Data Management (non-tech: database overview) Data Science (non-tech: types of data analysis) Spatial Analysis (non-tech: types of spatial data analysis) Visualization (non-tech: visualization options) Packages News/Blog How to Maintain this Site","title":"Contents"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"data-management/database-overview/","text":"Learning Objectives Be able to recommend a database technology for the SETT Understand the functionality of the selected database technology Goal: Demystify the database and its uses to encourage faster adoption of database tech in our projects Objectives Illustrate what a database looks like from the user perspective Clarify the process and level of effort for developing a database Link to more advanced topics for technical staff Audience: All EI staff Content Intro When to use a database Database functionality Navigation View Data Entry Tables Queries (search/replace) Reports Forms Considerations when selecting a database Free vs Paid (e.g. Salesforce) CAP theorem SQL vs NoSQL Keep it simple Updates/Releases Support Lifetime Types of databases How to create a database Schema design ACID Setting up the database Populating the database Importing/Exporting Data Distributing the database Managing the database DBA vs User Transitions Porting to the web Advanced Topics SQL language basics Joins (inner, outer) Advanced Interface Design (esp. for Postgres, MySQL) Cloud Analytics Platforms Zoho, Domo Non-traditional options Airtable Terminology Resources Intro to Access Databases (YouTube: Design & Deploy) Udemy Excerpt on Database Selection (YouTube: Frank Kane) How to Choose Relational Databases (YouTube: Socratica) Postgres Installation & Overview (YouTube: Socratica) Monarch - Database Options Memo (in Downloads) Assets xcld bobby tables cartoon xlcd data pipeline xlcd hard problems with algorithms xKcd curve fitting To Do [ ] Better example for database need in Introduction to Databases [ ] Asset: linked tables example Decision Tree Concept Where will the database live? Website hosted by the client (2) On the client's local server Are we talking about a Squarespace they update occasionally or a managed website? Full stack web developers in the mix (3) Actually, its a Wordpress site... Work with the client's web provider to design the schema, they'll do the rest What kind of budget are we talking? Just inked a deal with the Bill & Melinda Gates Foundation (5) eh (6) Consider hiring a provider to set up the database and offer ongoing support You probably don't have budget for a publicly available database. Consider a local option instead (7) How much data are we talking? Seems like a lot but its manageable (8) We make Facebook look like punks (11) Can we create the data analyses? Yes (9) No (10) MS Access or OO Base Salesforce, AirTable, Zoho, Domo, Notion You'll want professional help. Do you (or your client) have data stored across so many files you sometimes can't remember where it is? Are you scrambling to pull together information when requested, constantly months behind in reporting, or finding yourself dumping data from multiple sources into a single spreadsheet for analysis? If so, it might be time for a database. This tutorial will introduce you to databases , help you select the right database for your needs, and describe the process for developing and managing a database. Introduction to Databases A database is simply an organized store for information. Data are stored in tables and relationships are defined between tables (hence the name, 'relational database'). Imagine you have a list of employees, their position titles, and their salaries (which are based on position). You can create one table that includes the employee information and their position titles, and another table that stores the salary associated with each position. You can see the salary for each employee by 'joining' the tables based on the position title. Now imagine you want to give everyone a cost-of-living adjustment. Simply update the salaries in the salary table and the change will automatically be carried over to each employee based on their position title. In this way, you don't need to edit salary information that is repeated, for example with multiple employees of the same position. A trivial example for sure, but imagine instead you have hundreds or thousands of employees. You certainly wouldn't want to manually change the salary information for every employee! [ASSET: ILLUSTRATE TABLE LINKAGES] Interacting with Databases So what's a database even look like? Most users will interact with a database through a navigation form. The navigation form surfaces the important functionality of the database, including entering data, querying data, and generating reports. Here's an example navigation form for a bakery's order database created in Microsoft Access. The navigation form is set up after the database is configured by the database administrator (DBA; this may be you, someone on the Metrics Service Line, or an outside contractor). The navigation form (as well as other forms, queries and reports that are made available to the user by the DBA) make the data in the database accessible to users while protecting the integrity of the database Forms Data is entered into the database primarily through forms. Forms can be made available through the Navigation Form or through individual forms designed and made available by the DBA. Queries Queries allow you to search for and update records in the database. Want to know how many orders were placed yesterday? How many blueberry muffins you've sold this year? You'll need a query for that. Reports Reports are queries or collections of queries that can be batched together and run periodically. You might have a standard report that is produced each quarter or a ready-made report to provide real time information to your boss when requested. Reports must also be set up and made available by the DBA. More than Just a Database Before we go any further... How to Choose a Database There are many options when it comes to choosing a database. This section will help you pick the right one. Here are a few considerations. Budget Consider both the cost of the software and the cost of designing and maintaining the database. Many database options are available at no cost as open source software (e.g., MySQL, PostgreSQL, MariaDB). While these are robust, scalable database solutions used by many international corporations, they are not user friendly out of the box. Often, these open source solutions are paired with a web-based interface. If you are working with a web developer and have the budget for them to design the forms, queries and reports you need--you'll likely choose one of these open source options. If not, you may need a different solution, like Microsoft Access or even Salesforce. These may require a license or subscription but will allow you to query data and create reports without hiring specialized expertise. Scalability For most of our applications, you won't need to worry about the database growing too large to fit on a single server. The only likely exception would be if attempting to store geospatial data within a relational database outside of ArcGIS. Try not to do that. If you are worried about scalability and think you need a cloud-based solution, consult an expert. Hosting & Integration If the database will be hosted and managed by the client or their website manager, your options will likely be limited to those that integrate with their existing systems. Work with them when selecting a database and during database design. In most other cases, the database will live on the client's local drive or server. Most database solutions can be run locally or on a remote server. Support What would you do if your database crashes at 2am? Run into the office and call technical support? Or keep snoozing? Enterprise solutions provided by Oracle and IBM are available if the thought of a database crash keeps you up at night. For the rest of us, 24-hour on-call support just isn't necessary. Some open source options have companies behind them that sell support if you need it. Some are only supported by their user community. Also consider that","title":"Database Overview"},{"location":"data-management/database-overview/#introduction-to-databases","text":"A database is simply an organized store for information. Data are stored in tables and relationships are defined between tables (hence the name, 'relational database'). Imagine you have a list of employees, their position titles, and their salaries (which are based on position). You can create one table that includes the employee information and their position titles, and another table that stores the salary associated with each position. You can see the salary for each employee by 'joining' the tables based on the position title. Now imagine you want to give everyone a cost-of-living adjustment. Simply update the salaries in the salary table and the change will automatically be carried over to each employee based on their position title. In this way, you don't need to edit salary information that is repeated, for example with multiple employees of the same position. A trivial example for sure, but imagine instead you have hundreds or thousands of employees. You certainly wouldn't want to manually change the salary information for every employee! [ASSET: ILLUSTRATE TABLE LINKAGES]","title":"Introduction to Databases"},{"location":"data-management/database-overview/#interacting-with-databases","text":"So what's a database even look like? Most users will interact with a database through a navigation form. The navigation form surfaces the important functionality of the database, including entering data, querying data, and generating reports. Here's an example navigation form for a bakery's order database created in Microsoft Access. The navigation form is set up after the database is configured by the database administrator (DBA; this may be you, someone on the Metrics Service Line, or an outside contractor). The navigation form (as well as other forms, queries and reports that are made available to the user by the DBA) make the data in the database accessible to users while protecting the integrity of the database","title":"Interacting with Databases"},{"location":"data-management/database-overview/#forms","text":"Data is entered into the database primarily through forms. Forms can be made available through the Navigation Form or through individual forms designed and made available by the DBA.","title":"Forms"},{"location":"data-management/database-overview/#queries","text":"Queries allow you to search for and update records in the database. Want to know how many orders were placed yesterday? How many blueberry muffins you've sold this year? You'll need a query for that.","title":"Queries"},{"location":"data-management/database-overview/#reports","text":"Reports are queries or collections of queries that can be batched together and run periodically. You might have a standard report that is produced each quarter or a ready-made report to provide real time information to your boss when requested. Reports must also be set up and made available by the DBA.","title":"Reports"},{"location":"data-management/database-overview/#more-than-just-a-database","text":"Before we go any further...","title":"More than Just a Database"},{"location":"data-management/database-overview/#how-to-choose-a-database","text":"There are many options when it comes to choosing a database. This section will help you pick the right one. Here are a few considerations.","title":"How to Choose a Database"},{"location":"data-management/database-overview/#budget","text":"Consider both the cost of the software and the cost of designing and maintaining the database. Many database options are available at no cost as open source software (e.g., MySQL, PostgreSQL, MariaDB). While these are robust, scalable database solutions used by many international corporations, they are not user friendly out of the box. Often, these open source solutions are paired with a web-based interface. If you are working with a web developer and have the budget for them to design the forms, queries and reports you need--you'll likely choose one of these open source options. If not, you may need a different solution, like Microsoft Access or even Salesforce. These may require a license or subscription but will allow you to query data and create reports without hiring specialized expertise.","title":"Budget"},{"location":"data-management/database-overview/#scalability","text":"For most of our applications, you won't need to worry about the database growing too large to fit on a single server. The only likely exception would be if attempting to store geospatial data within a relational database outside of ArcGIS. Try not to do that. If you are worried about scalability and think you need a cloud-based solution, consult an expert.","title":"Scalability"},{"location":"data-management/database-overview/#hosting-integration","text":"If the database will be hosted and managed by the client or their website manager, your options will likely be limited to those that integrate with their existing systems. Work with them when selecting a database and during database design. In most other cases, the database will live on the client's local drive or server. Most database solutions can be run locally or on a remote server.","title":"Hosting &amp; Integration"},{"location":"data-management/database-overview/#support","text":"What would you do if your database crashes at 2am? Run into the office and call technical support? Or keep snoozing? Enterprise solutions provided by Oracle and IBM are available if the thought of a database crash keeps you up at night. For the rest of us, 24-hour on-call support just isn't necessary. Some open source options have companies behind them that sell support if you need it. Some are only supported by their user community. Also consider that","title":"Support"},{"location":"git/initializing-git/","text":"This section describes how to begin a new project and track it on Github. We have two options: Create the project locally and push it up to Github* Create the project on Github first and clone it down to your computer *If you already have a project started, you've already started locally. Starting Locally If you have already started a project or prefer to work from your local machine first, follow these steps: 1. Create the project directory In Windows Explorer, navigate to the folder in which you will create your project directory (or the root of an existing project directory). Right-click and select 'GitBash Here' to open an instance of Bash. Skip the following paragraph if you already have a project started . Use the command mkdir <project-name> (replace <project-name> with the name of the directory for the project) to create a folder. Next, use the command cd <project-name> to move into that folder. 2. Initialize git Use the command git init to initialize git. A new repository named .git will be created within the directory which stores all of the git version control. You don't need to have GitBash open during your editing sessions, this folder will take care of all of your version control. If for some reason you want to stop tracking with git and lose all of your previous versions, just delete this folder. 3. Create a .gitignore and README.md file Use the command touch .gitignore to create a new file named .gitignore. This file will be used by git to ignore files in the project that should not be tracked. Use the command code .gitignore to open VSCode to edit the file (or however you would open and edit files). Using one line per folder or file, list all folders or files to be ignored. Wildcards (i.e., globbing patterns) are honored. Each project will be different but consider including *.pyc , venv , idea . See this GitHub help page for more on .gitignore files and this repo for suggested files to ignore. Use the command touch README.md to create a README file. This file will automatically be displayed on the repository page on Github. Using the Markdown language, populate this README file with important info as necessary. 4. Commit your initial file(s) First, we'll need to add all files to be tracked by git. Use the command: git add -A Next we'll use a commit to get the first batch of files/folders into our git repository. Use the following command: git commit -m \"Initial Commit\" You will learn more about commits and other features of git in the Using Git section. 5. Create a Github repository Navigate to your Github.com page and login. Click the green Create New Repository button. Name it with the same name you used in step 1 for the project directory. Provide a description. The repository will be public. DO NOT create a README or .gitignore file. After you click 'Ok', Github will provide instructions for importing your project files into the repository. Use HTTP or SSH if you have it set up. Copy the url provided to your clipboard. You'll use two commands in GitBash to accomplish this: git remote add origin <url> git push -u origin master --tags The first line establishes a remote connection to the repository. Replace the url with the url provided by github to your project repository. Note that you can change the name 'origin' to anything you'd like, but origin is used by convention. You will be prompted to sign into your Github account. The second line 'pushes' your files/folders up to Github. The -u flag tells Github to track these files/folders along with master, while the --tags flag will move any messages from previous commits. If this fails, it may be because you already have a remote established named 'origin'. Try git remove rm origin to remove any existing connections, or change the name origin to something unique. To confirm your remote connection was established, use the command git remote -v . 6. Create your project structure and begin coding! At this point, you may wish to switch into your IDE and open the project folder to build your project architecture and begin coding. Follow the workflow described in the Using Git section as you work. Starting Remote In this option, we'll start by creating a repository on Github and then clone that down to our computer. You can copy files/folders into this newly created repository if you'd like. 1. Create a Gihub repository Navigate to your Github.com page and login. Click the green Create New Repository button. Provide a description. The repository will be public. Create a README and .gitignore file. Optionally add a license. 2. Clone the remote repository Within the project repository on Github, click the 'Clone or Download' button. Use HTTP or SSH if you have it set up. Copy the url provided to your clipboard. In Windows Explorer, navigate to the folder in which you will create your project directory. Right-click and select 'GitBash Here' to open an instance of Bash. Clone the repository into this folder with the command: git clone <url> where you replace <url> with the copied url (use Shift+Insert to paste into Bash). You may provide a name for the project following the url if you'd like the folder on your local drive to have a different name than the repository on Github. Run ls to confirm that the repository was created. Type the command cd <repository-name> to move into the repository folder (replace <repository name> with the correct name). If you need to copy files/folders into the repository, use the command cp -R <~/path/> . . Replace <~/path/> with the correct path of the source folder/file. The -R flag signifies recursive and copies everything from within the folders as well. The . simply means the current directory, so your copying everything from the path provided to the current directory. 3. Populate the .gitignore file The .gitignore file will be used by git to ignore files in the project that should not be tracked. Use the command code .gitignore to open VSCode to edit the file (or however you would open and edit files). Using one line per folder or file, list all folders or files to be ignored. Wildcards (i.e., globbing patterns) are honored. Each project will be different but consider including *.pyc , venv , idea . See this GitHub help page for more on .gitignore files and this repo for suggested files to ignore. 4. Create your project structure and begin coding! At this point, you may wish to switch into your IDE and open the project folder to build your project architecture and begin coding. Follow the workflow described in the Using Git section as you work. Additional Resources Corey Shafer's excellent series on Git","title":"Create Project"},{"location":"git/initializing-git/#starting-locally","text":"If you have already started a project or prefer to work from your local machine first, follow these steps:","title":"Starting Locally"},{"location":"git/initializing-git/#1-create-the-project-directory","text":"In Windows Explorer, navigate to the folder in which you will create your project directory (or the root of an existing project directory). Right-click and select 'GitBash Here' to open an instance of Bash. Skip the following paragraph if you already have a project started . Use the command mkdir <project-name> (replace <project-name> with the name of the directory for the project) to create a folder. Next, use the command cd <project-name> to move into that folder.","title":"1. Create the project directory"},{"location":"git/initializing-git/#2-initialize-git","text":"Use the command git init to initialize git. A new repository named .git will be created within the directory which stores all of the git version control. You don't need to have GitBash open during your editing sessions, this folder will take care of all of your version control. If for some reason you want to stop tracking with git and lose all of your previous versions, just delete this folder.","title":"2. Initialize git"},{"location":"git/initializing-git/#3-create-a-gitignore-and-readmemd-file","text":"Use the command touch .gitignore to create a new file named .gitignore. This file will be used by git to ignore files in the project that should not be tracked. Use the command code .gitignore to open VSCode to edit the file (or however you would open and edit files). Using one line per folder or file, list all folders or files to be ignored. Wildcards (i.e., globbing patterns) are honored. Each project will be different but consider including *.pyc , venv , idea . See this GitHub help page for more on .gitignore files and this repo for suggested files to ignore. Use the command touch README.md to create a README file. This file will automatically be displayed on the repository page on Github. Using the Markdown language, populate this README file with important info as necessary.","title":"3. Create a .gitignore and README.md file"},{"location":"git/initializing-git/#4-commit-your-initial-files","text":"First, we'll need to add all files to be tracked by git. Use the command: git add -A Next we'll use a commit to get the first batch of files/folders into our git repository. Use the following command: git commit -m \"Initial Commit\" You will learn more about commits and other features of git in the Using Git section.","title":"4. Commit your initial file(s)"},{"location":"git/initializing-git/#5-create-a-github-repository","text":"Navigate to your Github.com page and login. Click the green Create New Repository button. Name it with the same name you used in step 1 for the project directory. Provide a description. The repository will be public. DO NOT create a README or .gitignore file. After you click 'Ok', Github will provide instructions for importing your project files into the repository. Use HTTP or SSH if you have it set up. Copy the url provided to your clipboard. You'll use two commands in GitBash to accomplish this: git remote add origin <url> git push -u origin master --tags The first line establishes a remote connection to the repository. Replace the url with the url provided by github to your project repository. Note that you can change the name 'origin' to anything you'd like, but origin is used by convention. You will be prompted to sign into your Github account. The second line 'pushes' your files/folders up to Github. The -u flag tells Github to track these files/folders along with master, while the --tags flag will move any messages from previous commits. If this fails, it may be because you already have a remote established named 'origin'. Try git remove rm origin to remove any existing connections, or change the name origin to something unique. To confirm your remote connection was established, use the command git remote -v .","title":"5. Create a Github repository"},{"location":"git/initializing-git/#6-create-your-project-structure-and-begin-coding","text":"At this point, you may wish to switch into your IDE and open the project folder to build your project architecture and begin coding. Follow the workflow described in the Using Git section as you work.","title":"6. Create your project structure and begin coding!"},{"location":"git/initializing-git/#starting-remote","text":"In this option, we'll start by creating a repository on Github and then clone that down to our computer. You can copy files/folders into this newly created repository if you'd like.","title":"Starting Remote"},{"location":"git/initializing-git/#1-create-a-gihub-repository","text":"Navigate to your Github.com page and login. Click the green Create New Repository button. Provide a description. The repository will be public. Create a README and .gitignore file. Optionally add a license.","title":"1. Create a Gihub repository"},{"location":"git/initializing-git/#2-clone-the-remote-repository","text":"Within the project repository on Github, click the 'Clone or Download' button. Use HTTP or SSH if you have it set up. Copy the url provided to your clipboard. In Windows Explorer, navigate to the folder in which you will create your project directory. Right-click and select 'GitBash Here' to open an instance of Bash. Clone the repository into this folder with the command: git clone <url> where you replace <url> with the copied url (use Shift+Insert to paste into Bash). You may provide a name for the project following the url if you'd like the folder on your local drive to have a different name than the repository on Github. Run ls to confirm that the repository was created. Type the command cd <repository-name> to move into the repository folder (replace <repository name> with the correct name). If you need to copy files/folders into the repository, use the command cp -R <~/path/> . . Replace <~/path/> with the correct path of the source folder/file. The -R flag signifies recursive and copies everything from within the folders as well. The . simply means the current directory, so your copying everything from the path provided to the current directory.","title":"2. Clone the remote repository"},{"location":"git/initializing-git/#3-populate-the-gitignore-file","text":"The .gitignore file will be used by git to ignore files in the project that should not be tracked. Use the command code .gitignore to open VSCode to edit the file (or however you would open and edit files). Using one line per folder or file, list all folders or files to be ignored. Wildcards (i.e., globbing patterns) are honored. Each project will be different but consider including *.pyc , venv , idea . See this GitHub help page for more on .gitignore files and this repo for suggested files to ignore.","title":"3. Populate the .gitignore file"},{"location":"git/initializing-git/#4-create-your-project-structure-and-begin-coding","text":"At this point, you may wish to switch into your IDE and open the project folder to build your project architecture and begin coding. Follow the workflow described in the Using Git section as you work.","title":"4. Create your project structure and begin coding!"},{"location":"git/initializing-git/#additional-resources","text":"Corey Shafer's excellent series on Git","title":"Additional Resources"},{"location":"git/notes/","text":"HELP ME PLEASE! Setting Up Git & GitHub Download Git git-scm.com Download & run installer git --version on cmd to make sure its successfully installed Configure Git git config --global user.name <name> git config --global user.email <email> git config --list to see all settings Git Log git log <- all commits git show <- last commit git ls-files <- lists all files that git is tracking git log --oneline --graph --decorate --all <-more detailed history of commits To create an alias for the git history command git config --global alias.hist \"log --oneline --graph --decorate --all\" now use git hist to see the same command, note it still accepts additional arguments (for example, provide --filename to see history for one file) History will be served line by line, type q to quit at any time Setup editor (VSCode should be already available as 'code') Add full folder path that includes executable to system path environment variable, separate with semi-colon Restart Bash Create alias for editor notepad++ ~/.bash_profile alias npp='notepad++ -mulitInst - nosession' git config --global core.editor \"notepad++ -multiInst -nosession\" git config --global -e Setup Diff & Merge Tool This section describes how to use p4merge. Use VS Code instead git config --global diff.tool p4merge git config --gloabl difftool.p4merge.path \"C:/... /p4merge.exe git config --global difftool.prompt false git config --global merge.tool p4merge git config --global mergetool.p4merge.path \"C:/.../p4merge.exe git config --global mergetool.prompt false Git Workflow Common workflow on master Navigate to root project folder in Windows Explorer Right-click and select 'Git Bash Here' from context menu git status commit and push any changes if found, but usually wouldn't be Work on a feature You can open, add, and remove files using the Windows Explorer GUI or using unix commands in Git Bash Commit changes locally If new files were added, git add -A then git commit -m \"Message\" Otherwise, express commit git commit -am \"Message\" Push to GitHub git pull origin master in case others are working on it git push origin master Common workflow on branch Creating and committing a branch git branch <name> <- creates branch git checkout <branch name> <- checks out make changes git add -A git commit -m \"Message\" git push -u origin <branch name> (first time only) git branch -a (to confirm) Merging to master git checkout master git pull origin master git branch --merged (which branches have been merged?) git merge <branch name> git push origin master git branch -d <branch name> (to delete branch locally) git push origin --delete <branch name> (to delete the remote branch) Workflow Commands Adding files to staging area Use git add <filename> to add file Use git add -A to add everything in the working directory (Use git reset <filename> to remove from the staging area or git reset to remove everything) Regular commit git commit -m \"Message\" If -m \"Message\" is excluded, the default editor will be opened and a message should be inputted. No need to add quotes or anything else. Line breaks will be ignored. Express commit git commit -am \"Message\" For any files already tracked (use git ls-files if unsure or git status to see what's in staging area) Renaming files git mv <file1> <file2> git commit -m \"message\" also can use git add -A if changes (renames, deletions) made outside of git Delete files (from git tracking) git rm filename git commit -m \"message\" also can use git add -u if files deleted outside of git Cloning remote repositories git clone <url> git remote -v <- shows remote connection git branch -a <- shows branches in repository Pushing git diff <- shows changes Example workflow Other Common Commands Help git <action> --help Remove file after adding to .gitignore git rm -r --cached <file or folder name> git commit -m \"Removed files message\" git push origin master List files git ls-files Open file with default editor start <file name> Open file with VSCode code <file name> (set up default editors with aliases or use start and ensure preferred editor is system default) Working Together There are two common ways of collaborating: Fork the repo and submit pull requests to the repo owner Add Collaborators to your repo to give others push authority Forking the repo and submitting pull requests is the safest, as the repo owner is in charge of reviewing all proposed changes before integrating them into the repo. However, that can create a lot of work for the repo owner depending on the frequency of commits. Adding Collaborators can be done in the Settings tab of a repo. This allows anyone listed as a collaborator to work on the repo as if it was their own. This will streamline the workflow, but you risk missing simple mistakes, severe mistakes, and malicious intent. https://kbroman.org/github_tutorial/pages/fork.html","title":"Notes"},{"location":"git/notes/#setting-up-git-github","text":"","title":"Setting Up Git &amp; GitHub"},{"location":"git/notes/#download-git","text":"git-scm.com Download & run installer git --version on cmd to make sure its successfully installed","title":"Download Git"},{"location":"git/notes/#configure-git","text":"git config --global user.name <name> git config --global user.email <email> git config --list to see all settings Git Log git log <- all commits git show <- last commit git ls-files <- lists all files that git is tracking git log --oneline --graph --decorate --all <-more detailed history of commits","title":"Configure Git"},{"location":"git/notes/#to-create-an-alias-for-the-git-history-command","text":"git config --global alias.hist \"log --oneline --graph --decorate --all\" now use git hist to see the same command, note it still accepts additional arguments (for example, provide --filename to see history for one file) History will be served line by line, type q to quit at any time Setup editor (VSCode should be already available as 'code') Add full folder path that includes executable to system path environment variable, separate with semi-colon Restart Bash Create alias for editor notepad++ ~/.bash_profile alias npp='notepad++ -mulitInst - nosession' git config --global core.editor \"notepad++ -multiInst -nosession\" git config --global -e Setup Diff & Merge Tool This section describes how to use p4merge. Use VS Code instead git config --global diff.tool p4merge git config --gloabl difftool.p4merge.path \"C:/... /p4merge.exe git config --global difftool.prompt false git config --global merge.tool p4merge git config --global mergetool.p4merge.path \"C:/.../p4merge.exe git config --global mergetool.prompt false","title":"To create an alias for the git history command"},{"location":"git/notes/#git-workflow","text":"","title":"Git Workflow"},{"location":"git/notes/#common-workflow-on-master","text":"Navigate to root project folder in Windows Explorer Right-click and select 'Git Bash Here' from context menu git status commit and push any changes if found, but usually wouldn't be Work on a feature You can open, add, and remove files using the Windows Explorer GUI or using unix commands in Git Bash Commit changes locally If new files were added, git add -A then git commit -m \"Message\" Otherwise, express commit git commit -am \"Message\" Push to GitHub git pull origin master in case others are working on it git push origin master","title":"Common workflow on master"},{"location":"git/notes/#common-workflow-on-branch","text":"","title":"Common workflow on branch"},{"location":"git/notes/#creating-and-committing-a-branch","text":"git branch <name> <- creates branch git checkout <branch name> <- checks out make changes git add -A git commit -m \"Message\" git push -u origin <branch name> (first time only) git branch -a (to confirm)","title":"Creating and committing a branch"},{"location":"git/notes/#merging-to-master","text":"git checkout master git pull origin master git branch --merged (which branches have been merged?) git merge <branch name> git push origin master git branch -d <branch name> (to delete branch locally) git push origin --delete <branch name> (to delete the remote branch)","title":"Merging to master"},{"location":"git/notes/#workflow-commands","text":"Adding files to staging area Use git add <filename> to add file Use git add -A to add everything in the working directory (Use git reset <filename> to remove from the staging area or git reset to remove everything) Regular commit git commit -m \"Message\" If -m \"Message\" is excluded, the default editor will be opened and a message should be inputted. No need to add quotes or anything else. Line breaks will be ignored. Express commit git commit -am \"Message\" For any files already tracked (use git ls-files if unsure or git status to see what's in staging area) Renaming files git mv <file1> <file2> git commit -m \"message\" also can use git add -A if changes (renames, deletions) made outside of git Delete files (from git tracking) git rm filename git commit -m \"message\" also can use git add -u if files deleted outside of git Cloning remote repositories git clone <url> git remote -v <- shows remote connection git branch -a <- shows branches in repository Pushing git diff <- shows changes Example workflow","title":"Workflow Commands"},{"location":"git/notes/#other-common-commands","text":"Help git <action> --help Remove file after adding to .gitignore git rm -r --cached <file or folder name> git commit -m \"Removed files message\" git push origin master List files git ls-files Open file with default editor start <file name> Open file with VSCode code <file name> (set up default editors with aliases or use start and ensure preferred editor is system default)","title":"Other Common Commands"},{"location":"git/notes/#working-together","text":"There are two common ways of collaborating: Fork the repo and submit pull requests to the repo owner Add Collaborators to your repo to give others push authority Forking the repo and submitting pull requests is the safest, as the repo owner is in charge of reviewing all proposed changes before integrating them into the repo. However, that can create a lot of work for the repo owner depending on the frequency of commits. Adding Collaborators can be done in the Settings tab of a repo. This allows anyone listed as a collaborator to work on the repo as if it was their own. This will streamline the workflow, but you risk missing simple mistakes, severe mistakes, and malicious intent. https://kbroman.org/github_tutorial/pages/fork.html","title":"Working Together"},{"location":"project-planning/project-planning/","text":"Getting Started Before beginning any project, start by thinking it through. What technologies are required? What existing frameworks or packages are available? How will the project be deployed? Who are the users? Is the project worth the effort? How long will it take? How will the project be supported? These are the high-level questions that will shape the direction and scope of the project. Use the EI Data Driven Product - Product Definition to get started. Next, think about the general approach. What will the architecture of the project be? Which specific packages will be used? Should you set up a virtual environment? What will the user interface look like? How will the backend be managed? What testing approach will be used? What conventions will be used for file and folder naming, code style, etc.? Draft a Tool Specifications document if warranted (i.e., for large, billable projects). See the draft Tool Specifications outline in the EI Data Driven Product - Product Definition. You should have a clear plan in writing before starting with the first line of code. Example Project Plan Here's an example project plan for this project: Goal & Objectives Goal Provide a single source for documenting and sharing EI's approach to data product development and best practices for current and future staff. Objectives Compile all existing resources for data product development and create single platform for accumulating new resources. Present information in user-friendly format that balances instructional content with requirements for illustrating in-line code. Require staff focused on product development to work with technologies that will be used in deploying EI data products. Users Primary EI's metrics staff and other technical staff Secondary Non-technical staff working with metrics staff to develop a data product Technologies: MkDocs - static site generator that requires Markdown Markdown - markup text language Typora - Markdown editor VS Code - IDE Github - Repository Github Project Pages - Deployment (gh-pages branch); see MkDocs deployment documentation . Screen2Gif - a screen recording app that saves outputs as gifs (for video instruction) Architecture The MkDocs package will create the basic architecture when creating the project . After creating the project, a mkdocs.yml file will be created. A docs folder will also be created with an index.md file within it. The index.md file manages the site outline; the mkdocs.yml file manages the settings. I'll add a README.md file in the root folder that will show up on the Github repo page. Files and folders can be created within the docs folder to create the project pages. Here's the file structure proposed within the root folder; the folder structure will mirror the site outline: mkdocs.yml README.md docs/ index.md project-planning/ file-organization-and-naming.md project-planning.md specifications-outline.md skills-and-training.md git/ installing-git.md initializing-git.md using-git.md development/ virtual-environments.md IDEs.md data-science-workflow.md deployment/ deployment-overview.md jupyter.md heroku.md linux.md aws.md docker.md data-management/ database-overview.md data-science/ workflow-overview.md data-exploration.md data-analysis.md data-visualization.md (e.g., inline exploratory) spatial-analysis/ earth-sensing.md google-earth-engine.md gdal.md arcpy.md land-use-land-cover.md dashboards/ visualization/ (e.g. report quality) packages/ dash pandas seaborn folium sqlite rasterio consulting/ program-requirements.md conservation-design/ Approach As you can see, lots to be done! The folder order is roughly the prioritization for these pages. Thus, my approach will be to work through these pages in roughly this order. One objective for this project is to provide a place to store new information as it becomes available, so I'll create the above folders initially as markdown files of the same name within a 'tbd' folder where I can store links and other references as I come across them. I've also built some of the pages above in other formats (Evernote, Google Docs, Jupyter Notebooks, etc.) so I can now pull everything together into one place. Other Considerations Keep track of concerns and other considerations as you go and revisit the specifications periodically to ensure the best approach has been taken. How will this tech stack allow for illustrating using code? Can code be run within the deployment environment, or will static code blocks and outputs be needed? How often should links to a Jupyter Notebook, for example, be used as opposed to illustrating static code? Is there a good way to surface content for non-technical staff that are interested in these services or are asked by the metrics staff to, for example, complete a product definition? Or should the users be limited to technical staff only?","title":"Project Planning"},{"location":"project-planning/project-planning/#getting-started","text":"Before beginning any project, start by thinking it through. What technologies are required? What existing frameworks or packages are available? How will the project be deployed? Who are the users? Is the project worth the effort? How long will it take? How will the project be supported? These are the high-level questions that will shape the direction and scope of the project. Use the EI Data Driven Product - Product Definition to get started. Next, think about the general approach. What will the architecture of the project be? Which specific packages will be used? Should you set up a virtual environment? What will the user interface look like? How will the backend be managed? What testing approach will be used? What conventions will be used for file and folder naming, code style, etc.? Draft a Tool Specifications document if warranted (i.e., for large, billable projects). See the draft Tool Specifications outline in the EI Data Driven Product - Product Definition. You should have a clear plan in writing before starting with the first line of code.","title":"Getting Started"},{"location":"project-planning/project-planning/#example-project-plan","text":"Here's an example project plan for this project:","title":"Example Project Plan"},{"location":"project-planning/project-planning/#goal-objectives","text":"","title":"Goal &amp; Objectives"},{"location":"project-planning/project-planning/#goal","text":"Provide a single source for documenting and sharing EI's approach to data product development and best practices for current and future staff.","title":"Goal"},{"location":"project-planning/project-planning/#objectives","text":"Compile all existing resources for data product development and create single platform for accumulating new resources. Present information in user-friendly format that balances instructional content with requirements for illustrating in-line code. Require staff focused on product development to work with technologies that will be used in deploying EI data products.","title":"Objectives"},{"location":"project-planning/project-planning/#users","text":"","title":"Users"},{"location":"project-planning/project-planning/#primary","text":"EI's metrics staff and other technical staff","title":"Primary"},{"location":"project-planning/project-planning/#secondary","text":"Non-technical staff working with metrics staff to develop a data product","title":"Secondary"},{"location":"project-planning/project-planning/#technologies","text":"MkDocs - static site generator that requires Markdown Markdown - markup text language Typora - Markdown editor VS Code - IDE Github - Repository Github Project Pages - Deployment (gh-pages branch); see MkDocs deployment documentation . Screen2Gif - a screen recording app that saves outputs as gifs (for video instruction)","title":"Technologies:"},{"location":"project-planning/project-planning/#architecture","text":"The MkDocs package will create the basic architecture when creating the project . After creating the project, a mkdocs.yml file will be created. A docs folder will also be created with an index.md file within it. The index.md file manages the site outline; the mkdocs.yml file manages the settings. I'll add a README.md file in the root folder that will show up on the Github repo page. Files and folders can be created within the docs folder to create the project pages. Here's the file structure proposed within the root folder; the folder structure will mirror the site outline: mkdocs.yml README.md docs/ index.md project-planning/ file-organization-and-naming.md project-planning.md specifications-outline.md skills-and-training.md git/ installing-git.md initializing-git.md using-git.md development/ virtual-environments.md IDEs.md data-science-workflow.md deployment/ deployment-overview.md jupyter.md heroku.md linux.md aws.md docker.md data-management/ database-overview.md data-science/ workflow-overview.md data-exploration.md data-analysis.md data-visualization.md (e.g., inline exploratory) spatial-analysis/ earth-sensing.md google-earth-engine.md gdal.md arcpy.md land-use-land-cover.md dashboards/ visualization/ (e.g. report quality) packages/ dash pandas seaborn folium sqlite rasterio consulting/ program-requirements.md conservation-design/","title":"Architecture"},{"location":"project-planning/project-planning/#approach","text":"As you can see, lots to be done! The folder order is roughly the prioritization for these pages. Thus, my approach will be to work through these pages in roughly this order. One objective for this project is to provide a place to store new information as it becomes available, so I'll create the above folders initially as markdown files of the same name within a 'tbd' folder where I can store links and other references as I come across them. I've also built some of the pages above in other formats (Evernote, Google Docs, Jupyter Notebooks, etc.) so I can now pull everything together into one place.","title":"Approach"},{"location":"project-planning/project-planning/#other-considerations","text":"Keep track of concerns and other considerations as you go and revisit the specifications periodically to ensure the best approach has been taken. How will this tech stack allow for illustrating using code? Can code be run within the deployment environment, or will static code blocks and outputs be needed? How often should links to a Jupyter Notebook, for example, be used as opposed to illustrating static code? Is there a good way to surface content for non-technical staff that are interested in these services or are asked by the metrics staff to, for example, complete a product definition? Or should the users be limited to technical staff only?","title":"Other Considerations"}]}