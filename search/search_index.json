{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EI Development Guidance This was produced with mkdocs. For full documentation visit mkdocs.org . Contents Getting Started Git Development Deployment Data Science Spatial Analysis Visualization Packages Consulting Workflow & Resources Conservation Design Process Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#ei-development-guidance","text":"This was produced with mkdocs. For full documentation visit mkdocs.org .","title":"EI Development Guidance"},{"location":"#contents","text":"Getting Started Git Development Deployment Data Science Spatial Analysis Visualization Packages Consulting Workflow & Resources Conservation Design Process","title":"Contents"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"getting-started/project-planning/","text":"Getting Started Before beginning any project, start by thinking it through. What technologies are required? What existing frameworks or packages are available? How will the project be deployed? Who are the users? Is the project worth the effort? How long will it take? How will the project be supported? These are the high-level questions that will shape the direction and scope of the project. Use the EI Data Driven Product - Product Definition to get started. Next, think about the general approach. What will the architecture of the project be? Which specific packages will be used? Should you set up a virtual environment? What will the user interface look like? How will the backend be managed? What testing approach will be used? What conventions will be used for file and folder naming, code style, etc.? Draft a Tool Specifications document if warranted (i.e., for large, billable projects). See the draft Tool Specifications outline in the EI Data Driven Product - Product Definition. You should have a clear plan in writing before starting with the first line of code. Example Project Plan Here's an example project plan for this project: Goal & Objectives Goal Provide a single source for documenting and sharing EI's approach to data product development and best practices for current and future staff. Objectives Compile all existing resources for data product development and create single platform for accumulating new resources. Present information in user-friendly format that balances instructional content with requirements for illustrating in-line code. Require staff focused on product development to work with technologies that will be used in deploying EI data products. Users Primary EI's metrics staff and other technical staff Secondary Non-technical staff working with metrics staff to develop a data product Technologies: MkDocs - static site generator that requires Markdown Markdown - markup text language Typora - Markdown editor VS Code - IDE Github - Repository Github Project Pages - Deployment (gh-pages branch); see MkDocs deployment documentation . Screen2Gif - a screen recording app that saves outputs as gifs (for video instruction) Architecture The MkDocs package will create the basic architecture when creating the project . After creating the project, a mkdocs.yml file will be created. A docs folder will also be created with an index.md file within it. The index.md file manages the site outline; the mkdocs.yml file manages the settings. I'll add a README.md file in the root folder that will show up on the Github repo page. Files and folders can be created within the docs folder to create the project pages. Here's the file structure proposed within the root folder; the folder structure will mirror the site outline: mkdocs.yml README.md Docs/ index.md assets/ (for storing gifs, images, etc.) getting-started/ setting-up.md project-planning.md specifications-outline.md skills-and-training.md git/ installing-git.md initializing-git.md using-git.md development/ virtual-environments deployment/ deployment-overview.md jupyter.md heroku.md linux.md aws.md docker.md data-science/ workflow-overview data-exploration data-analysis data-visualization spatial-analysis/ earth-sensing google-earth-engine gdal arcpy visualization/ packages/ dash pandas seaborn folium sqlite technologies/ SQL consulting/ conservation-design/ Approach As you can see, lots to be done! The folder order is roughly the prioritization for these pages. Thus, my approach will be to work through these pages in roughly this order. One objective for this project is to provide a place to store new information as it becomes available, so I'll create the above folders initially as markdown files of the same name within a 'tbd' folder where I can store links and other references as I come across them. I've also built some of the pages above in other formats (Evernote, Google Docs, Jupyter Notebooks, etc.) so I can now pull everything together into one place. Other Considerations Keep track of concerns and other considerations as you go and revisit the specifications periodically to ensure the best approach has been taken. How will this tech stack allow for illustrating using code? Can code be run within the deployment environment, or will static code blocks and outputs be needed? How often should links to a Jupyter Notebook, for example, be used as opposed to illustrating static code? Is there a good way to surface content for non-technical staff that are interested in these services or are asked by the metrics staff to, for example, complete a product definition? Or should the users be limited to technical staff only?","title":"Project Planning"},{"location":"getting-started/project-planning/#getting-started","text":"Before beginning any project, start by thinking it through. What technologies are required? What existing frameworks or packages are available? How will the project be deployed? Who are the users? Is the project worth the effort? How long will it take? How will the project be supported? These are the high-level questions that will shape the direction and scope of the project. Use the EI Data Driven Product - Product Definition to get started. Next, think about the general approach. What will the architecture of the project be? Which specific packages will be used? Should you set up a virtual environment? What will the user interface look like? How will the backend be managed? What testing approach will be used? What conventions will be used for file and folder naming, code style, etc.? Draft a Tool Specifications document if warranted (i.e., for large, billable projects). See the draft Tool Specifications outline in the EI Data Driven Product - Product Definition. You should have a clear plan in writing before starting with the first line of code.","title":"Getting Started"},{"location":"getting-started/project-planning/#example-project-plan","text":"Here's an example project plan for this project:","title":"Example Project Plan"},{"location":"getting-started/project-planning/#goal-objectives","text":"","title":"Goal &amp; Objectives"},{"location":"getting-started/project-planning/#goal","text":"Provide a single source for documenting and sharing EI's approach to data product development and best practices for current and future staff.","title":"Goal"},{"location":"getting-started/project-planning/#objectives","text":"Compile all existing resources for data product development and create single platform for accumulating new resources. Present information in user-friendly format that balances instructional content with requirements for illustrating in-line code. Require staff focused on product development to work with technologies that will be used in deploying EI data products.","title":"Objectives"},{"location":"getting-started/project-planning/#users","text":"","title":"Users"},{"location":"getting-started/project-planning/#primary","text":"EI's metrics staff and other technical staff","title":"Primary"},{"location":"getting-started/project-planning/#secondary","text":"Non-technical staff working with metrics staff to develop a data product","title":"Secondary"},{"location":"getting-started/project-planning/#technologies","text":"MkDocs - static site generator that requires Markdown Markdown - markup text language Typora - Markdown editor VS Code - IDE Github - Repository Github Project Pages - Deployment (gh-pages branch); see MkDocs deployment documentation . Screen2Gif - a screen recording app that saves outputs as gifs (for video instruction)","title":"Technologies:"},{"location":"getting-started/project-planning/#architecture","text":"The MkDocs package will create the basic architecture when creating the project . After creating the project, a mkdocs.yml file will be created. A docs folder will also be created with an index.md file within it. The index.md file manages the site outline; the mkdocs.yml file manages the settings. I'll add a README.md file in the root folder that will show up on the Github repo page. Files and folders can be created within the docs folder to create the project pages. Here's the file structure proposed within the root folder; the folder structure will mirror the site outline: mkdocs.yml README.md Docs/ index.md assets/ (for storing gifs, images, etc.) getting-started/ setting-up.md project-planning.md specifications-outline.md skills-and-training.md git/ installing-git.md initializing-git.md using-git.md development/ virtual-environments deployment/ deployment-overview.md jupyter.md heroku.md linux.md aws.md docker.md data-science/ workflow-overview data-exploration data-analysis data-visualization spatial-analysis/ earth-sensing google-earth-engine gdal arcpy visualization/ packages/ dash pandas seaborn folium sqlite technologies/ SQL consulting/ conservation-design/","title":"Architecture"},{"location":"getting-started/project-planning/#approach","text":"As you can see, lots to be done! The folder order is roughly the prioritization for these pages. Thus, my approach will be to work through these pages in roughly this order. One objective for this project is to provide a place to store new information as it becomes available, so I'll create the above folders initially as markdown files of the same name within a 'tbd' folder where I can store links and other references as I come across them. I've also built some of the pages above in other formats (Evernote, Google Docs, Jupyter Notebooks, etc.) so I can now pull everything together into one place.","title":"Approach"},{"location":"getting-started/project-planning/#other-considerations","text":"Keep track of concerns and other considerations as you go and revisit the specifications periodically to ensure the best approach has been taken. How will this tech stack allow for illustrating using code? Can code be run within the deployment environment, or will static code blocks and outputs be needed? How often should links to a Jupyter Notebook, for example, be used as opposed to illustrating static code? Is there a good way to surface content for non-technical staff that are interested in these services or are asked by the metrics staff to, for example, complete a product definition? Or should the users be limited to technical staff only?","title":"Other Considerations"},{"location":"git/initializing-git/","text":"This section describes how to begin a new project and track it on Github. We have two options: Create the project locally and push it up to Github* Create the project on Github first and clone it down to your computer *If you already have a project started, you've already started locally. Starting Locally If you have already started a project or prefer to work from your local machine first, follow these steps: 1. Create the project directory In Windows Explorer, navigate to the folder in which you will create your project directory (or the root of an existing project directory). Right-click and select 'GitBash Here' to open an instance of Bash. Skip the following paragraph if you already have a project started . Use the command mkdir <project-name> (replace <project-name> with the name of the directory for the project) to create a folder. Next, use the command cd <project-name> to move into that folder. 2. Initialize git Use the command git init to initialize git. A new repository named .git will be created within the directory which stores all of the git version control. You don't need to have GitBash open during your editing sessions, this folder will take care of all of your version control. If for some reason you want to stop tracking with git and lose all of your previous versions, just delete this folder. 3. Create a .gitignore and README.md file Use the command touch .gitignore to create a new file named .gitignore. This file will be used by git to ignore files in the project that should not be tracked. Use the command code .gitignore to open VSCode to edit the file (or however you would open and edit files). Using one line per folder or file, list all folders or files to be ignored. Wildcards (i.e., globbing patterns) are honored. Each project will be different but consider including *.pyc , venv , idea . See this GitHub help page for more on .gitignore files and this repo for suggested files to ignore. Use the command touch README.md to create a README file. This file will automatically be displayed on the repository page on Github. Using the Markdown language, populate this README file with important info as necessary. 4. Commit your initial file(s) First, we'll need to add all files to be tracked by git. Use the command: git add -A Next we'll use a commit to get the first batch of files/folders into our git repository. Use the following command: git commit -m \"Initial Commit\" You will learn more about commits and other features of git in the Using Git section. 5. Create a Github repository Navigate to your Github.com page and login. Click the green Create New Repository button. Name it with the same name you used in step 1 for the project directory. Provide a description. The repository will be public. DO NOT create a README or .gitignore file. After you click 'Ok', Github will provide instructions for importing your project files into the repository. Use HTTP or SSH if you have it set up. Copy the url provided to your clipboard. You'll use two commands in GitBash to accomplish this: git remote add origin <url> git push -u origin master --tags The first line establishes a remote connection to the repository. Replace the url with the url provided by github to your project repository. Note that you can change the name 'origin' to anything you'd like, but origin is used by convention. You will be prompted to sign into your Github account. The second line 'pushes' your files/folders up to Github. The -u flag tells Github to track these files/folders along with master, while the --tags flag will move any messages from previous commits. If this fails, it may be because you already have a remote established named 'origin'. Try git remove rm origin to remove any existing connections, or change the name origin to something unique. To confirm your remote connection was established, use the command git remote -v . 6. Create your project structure and begin coding! At this point, you may wish to switch into your IDE and open the project folder to build your project architecture and begin coding. Follow the workflow described in the Using Git section as you work. Starting Remote In this option, we'll start by creating a repository on Github and then clone that down to our computer. You can copy files/folders into this newly created repository if you'd like. 1. Create a Gihub repository Navigate to your Github.com page and login. Click the green Create New Repository button. Provide a description. The repository will be public. Create a README and .gitignore file. Optionally add a license. 2. Clone the remote repository Within the project repository on Github, click the 'Clone or Download' button. Use HTTP or SSH if you have it set up. Copy the url provided to your clipboard. In Windows Explorer, navigate to the folder in which you will create your project directory. Right-click and select 'GitBash Here' to open an instance of Bash. Clone the repository into this folder with the command: git clone <url> where you replace <url> with the copied url (use Shift+Insert to paste into Bash). You may provide a name for the project following the url if you'd like the folder on your local drive to have a different name than the repository on Github. Run ls to confirm that the repository was created. Type the command cd <repository-name> to move into the repository folder (replace <repository name> with the correct name). If you need to copy files/folders into the repository, use the command cp -R <~/path/> . . Replace <~/path/> with the correct path of the source folder/file. The -R flag signifies recursive and copies everything from within the folders as well. The . simply means the current directory, so your copying everything from the path provided to the current directory. 3. Populate the .gitignore file The .gitignore file will be used by git to ignore files in the project that should not be tracked. Use the command code .gitignore to open VSCode to edit the file (or however you would open and edit files). Using one line per folder or file, list all folders or files to be ignored. Wildcards (i.e., globbing patterns) are honored. Each project will be different but consider including *.pyc , venv , idea . See this GitHub help page for more on .gitignore files and this repo for suggested files to ignore. 4. Create your project structure and begin coding! At this point, you may wish to switch into your IDE and open the project folder to build your project architecture and begin coding. Follow the workflow described in the Using Git section as you work. Additional Resources Corey Shafer's excellent series on Git","title":"Create Project"},{"location":"git/initializing-git/#starting-locally","text":"If you have already started a project or prefer to work from your local machine first, follow these steps:","title":"Starting Locally"},{"location":"git/initializing-git/#1-create-the-project-directory","text":"In Windows Explorer, navigate to the folder in which you will create your project directory (or the root of an existing project directory). Right-click and select 'GitBash Here' to open an instance of Bash. Skip the following paragraph if you already have a project started . Use the command mkdir <project-name> (replace <project-name> with the name of the directory for the project) to create a folder. Next, use the command cd <project-name> to move into that folder.","title":"1. Create the project directory"},{"location":"git/initializing-git/#2-initialize-git","text":"Use the command git init to initialize git. A new repository named .git will be created within the directory which stores all of the git version control. You don't need to have GitBash open during your editing sessions, this folder will take care of all of your version control. If for some reason you want to stop tracking with git and lose all of your previous versions, just delete this folder.","title":"2. Initialize git"},{"location":"git/initializing-git/#3-create-a-gitignore-and-readmemd-file","text":"Use the command touch .gitignore to create a new file named .gitignore. This file will be used by git to ignore files in the project that should not be tracked. Use the command code .gitignore to open VSCode to edit the file (or however you would open and edit files). Using one line per folder or file, list all folders or files to be ignored. Wildcards (i.e., globbing patterns) are honored. Each project will be different but consider including *.pyc , venv , idea . See this GitHub help page for more on .gitignore files and this repo for suggested files to ignore. Use the command touch README.md to create a README file. This file will automatically be displayed on the repository page on Github. Using the Markdown language, populate this README file with important info as necessary.","title":"3. Create a .gitignore and README.md file"},{"location":"git/initializing-git/#4-commit-your-initial-files","text":"First, we'll need to add all files to be tracked by git. Use the command: git add -A Next we'll use a commit to get the first batch of files/folders into our git repository. Use the following command: git commit -m \"Initial Commit\" You will learn more about commits and other features of git in the Using Git section.","title":"4. Commit your initial file(s)"},{"location":"git/initializing-git/#5-create-a-github-repository","text":"Navigate to your Github.com page and login. Click the green Create New Repository button. Name it with the same name you used in step 1 for the project directory. Provide a description. The repository will be public. DO NOT create a README or .gitignore file. After you click 'Ok', Github will provide instructions for importing your project files into the repository. Use HTTP or SSH if you have it set up. Copy the url provided to your clipboard. You'll use two commands in GitBash to accomplish this: git remote add origin <url> git push -u origin master --tags The first line establishes a remote connection to the repository. Replace the url with the url provided by github to your project repository. Note that you can change the name 'origin' to anything you'd like, but origin is used by convention. You will be prompted to sign into your Github account. The second line 'pushes' your files/folders up to Github. The -u flag tells Github to track these files/folders along with master, while the --tags flag will move any messages from previous commits. If this fails, it may be because you already have a remote established named 'origin'. Try git remove rm origin to remove any existing connections, or change the name origin to something unique. To confirm your remote connection was established, use the command git remote -v .","title":"5. Create a Github repository"},{"location":"git/initializing-git/#6-create-your-project-structure-and-begin-coding","text":"At this point, you may wish to switch into your IDE and open the project folder to build your project architecture and begin coding. Follow the workflow described in the Using Git section as you work.","title":"6. Create your project structure and begin coding!"},{"location":"git/initializing-git/#starting-remote","text":"In this option, we'll start by creating a repository on Github and then clone that down to our computer. You can copy files/folders into this newly created repository if you'd like.","title":"Starting Remote"},{"location":"git/initializing-git/#1-create-a-gihub-repository","text":"Navigate to your Github.com page and login. Click the green Create New Repository button. Provide a description. The repository will be public. Create a README and .gitignore file. Optionally add a license.","title":"1. Create a Gihub repository"},{"location":"git/initializing-git/#2-clone-the-remote-repository","text":"Within the project repository on Github, click the 'Clone or Download' button. Use HTTP or SSH if you have it set up. Copy the url provided to your clipboard. In Windows Explorer, navigate to the folder in which you will create your project directory. Right-click and select 'GitBash Here' to open an instance of Bash. Clone the repository into this folder with the command: git clone <url> where you replace <url> with the copied url (use Shift+Insert to paste into Bash). You may provide a name for the project following the url if you'd like the folder on your local drive to have a different name than the repository on Github. Run ls to confirm that the repository was created. Type the command cd <repository-name> to move into the repository folder (replace <repository name> with the correct name). If you need to copy files/folders into the repository, use the command cp -R <~/path/> . . Replace <~/path/> with the correct path of the source folder/file. The -R flag signifies recursive and copies everything from within the folders as well. The . simply means the current directory, so your copying everything from the path provided to the current directory.","title":"2. Clone the remote repository"},{"location":"git/initializing-git/#3-populate-the-gitignore-file","text":"The .gitignore file will be used by git to ignore files in the project that should not be tracked. Use the command code .gitignore to open VSCode to edit the file (or however you would open and edit files). Using one line per folder or file, list all folders or files to be ignored. Wildcards (i.e., globbing patterns) are honored. Each project will be different but consider including *.pyc , venv , idea . See this GitHub help page for more on .gitignore files and this repo for suggested files to ignore.","title":"3. Populate the .gitignore file"},{"location":"git/initializing-git/#4-create-your-project-structure-and-begin-coding","text":"At this point, you may wish to switch into your IDE and open the project folder to build your project architecture and begin coding. Follow the workflow described in the Using Git section as you work.","title":"4. Create your project structure and begin coding!"},{"location":"git/initializing-git/#additional-resources","text":"Corey Shafer's excellent series on Git","title":"Additional Resources"}]}